package assignment4;

public class ManagementCompany {
	private String name;
    private String taxId;
    private double managementFeePercentage;
    private static final int MAX_PROPERTY = 5;
    private static final int MGMT_WIDTH = 10;
    private static final int MGMT_DEPTH = 10;
    private Property[] properties;
    private Plot plot;
    private int numberOfProperties;

    
    public ManagementCompany(String name, String taxId, double managementFeePercentage) {
        this.name = name;
        this.taxId = taxId;
        this.managementFeePercentage = managementFeePercentage;
        this.plot = new Plot(0, 0, MGMT_WIDTH, MGMT_DEPTH);
        this.properties = new Property[MAX_PROPERTY];
        this.numberOfProperties = 0;
    }

    // add property
    public int addProperty(Property property) {
        if (property == null) return -2;
        if (isPropertiesFull()) return -1;
        if (!plot.encompasses(property.getPlot())) return -3;

        for (int i = 0; i < numberOfProperties; i++) {
            if (properties[i].getPlot().overlaps(property.getPlot())) {
                return -4; // Overlaps with existing property
            }
        }

        properties[numberOfProperties++] = property;
        return numberOfProperties - 1; // Return the index
    }

    // calculate total rent
    public double getTotalRent() {
        double total = 0;
        for (Property property : properties) {
            if (property != null) {
                total += property.getRentalAmount();
            }
        }
        return total;
    }

    // find the highest rent property
    public Property getHighestRentProperty() {
        Property highest = null;
        for (Property property : properties) {
            if (property != null && (highest == null || property.getRentalAmount() > highest.getRentalAmount())) {
                highest = property;
            }
        }
        return highest;
    }

    public boolean isPropertiesFull() {
        return numberOfProperties >= MAX_PROPERTY;
    }

    public int getPropertiesCount() {
        return numberOfProperties;
    }

    public boolean isManagementFeeValid() {
        return managementFeePercentage >= 0 && managementFeePercentage <= 100;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("List of the properties for ").append(name).append(", taxID: ").append(taxId).append("\n");
        sb.append("______________________________________________________\n");
        for (Property property : properties) {
            if (property != null) {
                sb.append(property.toString()).append("\n");
            }
        }
        sb.append("______________________________________________________\n");
        sb.append("Total management Fee: ").append(getTotalRent() * managementFeePercentage / 100);
        return sb.toString();
    }
}
